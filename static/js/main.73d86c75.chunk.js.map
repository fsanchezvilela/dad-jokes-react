{"version":3,"sources":["components/Joke/Joke.tsx","components/JokeList/JokeList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Joke","votes","this","props","className","onClick","upvote","style","borderColor","getColor","downvote","text","getEmoji","React","JokeList","seenJokes","Set","state","jokes","JSON","parse","window","localStorage","getItem","loading","map","j","handleClick","bind","length","setState","getJokes","numJokesToGet","axios","get","headers","Accept","res","newJoke","data","joke","has","console","log","push","id","uuid","st","setItem","stringify","alert","delta","sortJokes","sort","a","b","src","alt","handleVote","key","Component","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73d86c75.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport './Joke.css';\r\nexport interface IJokeProps {\r\n    votes: number;\r\n    text: string;\r\n    upvote: () => void;\r\n    downvote: () => void;\r\n}\r\nexport interface IJokeState {}\r\n\r\nexport default class Joke extends React.Component<IJokeProps, IJokeState> {\r\n    private getColor(): string {\r\n        const { votes } = this.props;\r\n        if (votes >= 15) {\r\n            return '#4caf50';\r\n        } else if (votes >= 12) {\r\n            return '#8bc34a';\r\n        } else if (votes >= 9) {\r\n            return '#cddc39';\r\n        } else if (votes >= 6) {\r\n            return '#ffeb3b';\r\n        } else if (votes >= 3) {\r\n            return '#ffc107';\r\n        } else if (votes >= 0) {\r\n            return '#ff9800';\r\n        } else {\r\n            return '#f44336';\r\n        }\r\n    }\r\n\r\n    private getEmoji(): string {\r\n        const { votes } = this.props;\r\n        if (votes >= 15) {\r\n            return 'em em-rolling_on_the_floor_laughing';\r\n        } else if (votes >= 12) {\r\n            return 'em em-laughing';\r\n        } else if (votes >= 9) {\r\n            return 'em em-smiley';\r\n        } else if (votes >= 6) {\r\n            return 'em em-slightly_smiling_face';\r\n        } else if (votes >= 3) {\r\n            return 'em em-neutral_face';\r\n        } else if (votes >= 0) {\r\n            return 'em em-confused';\r\n        } else {\r\n            return 'em em-angry';\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div>\r\n                <div className=\"Joke\">\r\n                    <div className=\"Joke-buttons\">\r\n                        <i className=\"fas fa-arrow-up\" onClick={this.props.upvote}></i>\r\n                        <span className=\"Joke-votes\" style={{ borderColor: this.getColor() }}>\r\n                            {this.props.votes}\r\n                        </span>\r\n                        <i className=\"fas fa-arrow-down\" onClick={this.props.downvote}></i>\r\n                    </div>\r\n                    <div className=\"Joke-text\">{this.props.text}</div>\r\n                    <div className=\"Joke-smiley\">\r\n                        <i className={this.getEmoji()} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Joke from '../Joke/Joke';\r\nimport axios from 'axios';\r\nimport uuid from 'uuid/v4';\r\nimport './JokeList.css';\r\n\r\ntype asyncFn = () => Promise<boolean>;\r\n\r\ntype IProps = {\r\n    // using 'interface'\r\n    numJokesToGet: number;\r\n};\r\n\r\ntype IState = {\r\n    // using 'interface'\r\n    jokes: any;\r\n    loading: boolean;\r\n};\r\nclass JokeList extends Component<IProps, IState> {\r\n    static defaultProps = {\r\n        numJokesToGet: 10,\r\n    };\r\n\r\n    public constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            jokes: JSON.parse(window.localStorage.getItem('jokes') || '[]'),\r\n            loading: false,\r\n        };\r\n        this.seenJokes = new Set(\r\n            this.state.jokes.map((j: any) => {\r\n                return j.text;\r\n            }),\r\n        );\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    //fix duplicate joke bug\r\n    private seenJokes = new Set();\r\n\r\n    public componentDidMount() {\r\n        const { jokes } = this.state;\r\n        if (jokes.length === 0) {\r\n            this.setState({ loading: true });\r\n            this.getJokes();\r\n        }\r\n    }\r\n\r\n    private async getJokes(): Promise<void> {\r\n        try {\r\n            //Load Jokes\r\n            let jokes: { id: string; text: any; votes: number }[] = [];\r\n            while (jokes.length < this.props.numJokesToGet) {\r\n                let res = await axios.get('https://icanhazdadjoke.com/', {\r\n                    headers: { Accept: 'application/json' },\r\n                });\r\n                let newJoke = res.data.joke;\r\n                if (!this.seenJokes.has(newJoke)) {\r\n                    jokes.push({ id: uuid(), text: newJoke, votes: 0 });\r\n                } else {\r\n                    console.log('Found a duplicate!');\r\n                    console.log(newJoke);\r\n                }\r\n            }\r\n            this.setState(\r\n                st => ({\r\n                    loading: false,\r\n                    jokes: [...st.jokes, ...jokes],\r\n                }), //updated and set local storage\r\n                () => window.localStorage.setItem('jokes', JSON.stringify(this.state.jokes)),\r\n            );\r\n        } catch (e) {\r\n            alert(e);\r\n            this.setState({ loading: false });\r\n        }\r\n    }\r\n\r\n    private handleVote(id: string | number, delta: number): void {\r\n        this.setState(\r\n            st => ({\r\n                jokes: st.jokes.map((j: any) => {\r\n                    return j.id === id ? { ...j, votes: j.votes + delta } : j;\r\n                }),\r\n            }),\r\n            //updated local storage\r\n            () => window.localStorage.setItem('jokes', JSON.stringify(this.state.jokes)),\r\n        );\r\n    }\r\n\r\n    private handleClick(): void {\r\n        this.setState({ loading: true }, this.getJokes);\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        let sortJokes = this.state.jokes.sort((a: any, b: any) => b.votes - a.votes);\r\n        if (this.state.loading) {\r\n            return (\r\n                <div className=\"JokeList-spinner\">\r\n                    <i className=\"far fa-8x fa-laugh fa-spin\"></i>\r\n                    <h1 className=\"JokeList-title\">Loading...</h1>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"JokeList\">\r\n                <div className=\"JokeList-sidebar\">\r\n                    <h1 className=\"JokeList-title\">\r\n                        <span>Dad</span> Jokes\r\n                    </h1>\r\n                    <img\r\n                        src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\"\r\n                        alt=\"joke-icon\"\r\n                    />\r\n                    <button onClick={this.handleClick} className=\"JokeList-getmore\">\r\n                        Fetch Jokes\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"JokeList-jokes\">\r\n                    {sortJokes.map((j: any) => (\r\n                        <Joke\r\n                            upvote={(): void => {\r\n                                return this.handleVote(j.id, 1);\r\n                            }}\r\n                            downvote={(): void => {\r\n                                return this.handleVote(j.id, -1);\r\n                            }}\r\n                            key={j.id}\r\n                            votes={j.votes}\r\n                            text={j.text}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default JokeList;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport JokeList from './components/JokeList/JokeList';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <JokeList />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}